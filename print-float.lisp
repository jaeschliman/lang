(define (integer-digit-length n base)
    (let ((len (f->i (floorf (logf (i->f base) (i->f n))))))
      (+i len 1)))

(define (integer-nth-digit n digit base)
    (let* ((len (integer-digit-length n base))
           (offs (-i len digit))
           (div (f->i (powf (i->f base) (i->f (-i offs 1))))))
      (%i (/i n div) base)))

(define *digit-table* (make-array 16))
(let ()
  (aset *digit-table* 0 #\0)
  (aset *digit-table* 1 #\1)
  (aset *digit-table* 2 #\2)
  (aset *digit-table* 3 #\3)
  (aset *digit-table* 4 #\4)
  (aset *digit-table* 5 #\5)
  (aset *digit-table* 6 #\6)
  (aset *digit-table* 7 #\7)
  (aset *digit-table* 8 #\8)
  (aset *digit-table* 9 #\9)
  (aset *digit-table* 10 #\a)
  (aset *digit-table* 11 #\b)
  (aset *digit-table* 12 #\c)
  (aset *digit-table* 13 #\d)
  (aset *digit-table* 14 #\e)
  (aset *digit-table* 15 #\f))

(define (digit-to-character n)
    (aget *digit-table* n))

(defparameter *print-base* 10)

(define (%print-integer n stream base)
    (dotimes (i (integer-digit-length n base))
      (stream-write-char stream (digit-to-character (integer-nth-digit n i base)))))

(define (print-integer n stream)
    (%print-integer n stream *print-base*))

(print-integer 200 *standard-output*) (stream-write-char *standard-output* #\Newline)

(define (print-float f stream)
    (%print-integer (f->i f) stream 10)
  (stream-write-char stream #\.)
  (let ((rem (f->i (*f 100000.0 (remf f)))))
    (%print-integer rem stream 10)))

(print (integer-digit-length 10 10))
(print (integer-nth-digit 120 0 10))

(print-float 1.3 *standard-output*) (stream-write-char *standard-output* #\Newline)
(print-float 1.0 *standard-output*) (stream-write-char *standard-output* #\Newline)
(print-float 2.0 *standard-output*) (stream-write-char *standard-output* #\Newline)
(print-float 3.0 *standard-output*) (stream-write-char *standard-output* #\Newline)
(print-float 12345.12345 *standard-output*) (stream-write-char *standard-output* #\Newline)

(binding ((*print-base* 2))
         (print-integer 0 *standard-output*)
         (stream-write-char *standard-output* #\Newline)
         (print-integer 1 *standard-output*)
         (stream-write-char *standard-output* #\Newline)
         (print-integer 2 *standard-output*)
         (stream-write-char *standard-output* #\Newline)
         (print-integer 3 *standard-output*)
         (stream-write-char *standard-output* #\Newline))

(binding ((*print-base* 16))
         (print-integer 255 *standard-output*)
         (stream-write-char *standard-output* #\Newline)
         (print-integer 128 *standard-output*)
         (stream-write-char *standard-output* #\Newline)
         (print-integer 64 *standard-output*)
         (stream-write-char *standard-output* #\Newline)
         (print-integer 16 *standard-output*)
         (stream-write-char *standard-output* #\Newline))
