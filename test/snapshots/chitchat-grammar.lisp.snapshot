1
1
================================
(1)
1
================================
1 + 2
(send (quote #/st/+) 1 2)
================================
(1 + 2)
(send (quote #/st/+) 1 2)
================================
1 + 2 + 3
(send (quote #/st/+) 1 (send (quote #/st/+) 2 3))
================================
1 + (2 + 3)
(send (quote #/st/+) 1 (send (quote #/st/+) 2 3))
================================
(1 + 2) + 3
(send (quote #/st/+) (send (quote #/st/+) 1 2) 3)
================================
foo print
(send (quote #/st/print) (load foo))
================================
foo printWith: 10
(send (quote #/st/printWith:) (load foo) 10)
================================
baz do: (x + 5) with: Color blue
(send (quote #/st/do:with:) (load baz) (send (quote #/st/+) (load x) 5) (send (quote #/st/blue) (load Color)))
================================
^ x
(return (load x))
================================
^ x + 2
(return (send (quote #/st/+) (load x) 2))
================================
[ x + 2 ]
(block :args () :vars () :body ((send (quote #/st/+) (load x) 2)))
================================
[ ^ x ]
(block :args () :vars () :body ((return (load x))))
================================
 
     x := AThing becomeRelevant.
     y := self fooWith: x.
     self frobnicate: [ ^ y ]

(:vars () :body ((set! x (send (quote #/st/becomeRelevant) (load AThing))) (set! y (send (quote #/st/fooWith:) self (load x))) (send (quote #/st/frobnicate:) self (block :args () :vars () :body ((return (load y)))))))
================================
 |x y|
     x := AThing becomeRelevant.
     y := self fooWith: x.
     self frobnicate: [ :arg | self fooWith:arg. ^ y ]

(:vars (x y) :body ((set! x (send (quote #/st/becomeRelevant) (load AThing))) (set! y (send (quote #/st/fooWith:) self (load x))) (send (quote #/st/frobnicate:) self (block :args (arg) :vars () :body ((send (quote #/st/fooWith:) self (load arg)) (return (load y)))))))
================================

     | y |
     y := 5.
     ^ [ :x | x + y ]

(:vars (y) :body ((set! y 5) (return (block :args (x) :vars () :body ((send (quote #/st/+) (load x) (load y)))))))
================================

Array>>first [ ^ self at: 0 ]
String>>first [ ^ self at: 0 ]
LazyTable>>at:x put:y [
  storage ifNil: [ storage := HashTable new ].
  ^ storage at: x put:y
]
Cons>>collect: block [ ^ `(mapcar (lambda (it) (@send block it '#/st/value:)) self) ]
Fixnum>>pi [ ^ `*pi* ]

(%let () (class-set-method Array (quote #/st/first) (%nlambda () (self) (%let ((%invocation-tag (cons (quote ()) (quote ()))) (%result self)) (set-stack-mark %invocation-tag) (set! %result (@send self 0 (quote #/st/at:))) %result))) (class-set-method String (quote #/st/first) (%nlambda () (self) (%let ((%invocation-tag (cons (quote ()) (quote ()))) (%result self)) (set-stack-mark %invocation-tag) (set! %result (@send self 0 (quote #/st/at:))) %result))) (class-set-method LazyTable (quote #/st/at:put:) (%nlambda () (self x y) (%let ((%invocation-tag (cons (quote ()) (quote ()))) (%result self)) (set-stack-mark %invocation-tag) (@send storage (%nlambda () () (%let () (set! storage (@send HashTable (quote #/st/new))))) (quote #/st/ifNil:)) (set! %result (@send storage x y (quote #/st/at:put:))) %result))) (class-set-method Cons (quote #/st/collect:) (%nlambda () (self block) (%let ((%invocation-tag (cons (quote ()) (quote ()))) (%result self)) (set-stack-mark %invocation-tag) (set! %result (mapcar (%nlambda () (it) (@send block it (quote #/st/value:))) self)) %result))) (class-set-method Fixnum (quote #/st/pi) (%nlambda () (self) (%let ((%invocation-tag (cons (quote ()) (quote ()))) (%result self)) (set-stack-mark %invocation-tag) (set! %result *pi*) %result))))
================================

Fixnum>>+ other [ ^ `(+ self other) ]
Closure>>value [ ^ `(self) ]
Boolean>>ifTrue: then ifFalse: else [
 ^ `(if self (@send then '#/st/value) (@send else '#/st/value))
]
Fixnum>>isEven [ ^ `(= 0 (% self 2)) ]
Fixnum>>aCheck [
  (self isEven) ifTrue: [ ^ 'yes, even' ] ifFalse: [ ^ 'no, not even' ]
]
Fixnum>>callIfEven: block [
  (self isEven) ifTrue: [ block value ] ifFalse: [ false ]
]
Fixnum>>anotherCheck [
  self callIfEven: [ ^ 'early exit' ].
  ^ 'was not even'
]

================================
5
10
#t
#/st/ifTrue:ifFalse:
(even? #t)
"ok"
"ok"
"yes, even"
(expecting early exit)
"early exit"
(expecting was not even)
"was not even"
done
