(define board-size 10)
(define tile-size 75)

(define buffer (make-image (* board-size tile-size) (* board-size tile-size)))
(define screen-size (make-point (* board-size tile-size) (* board-size tile-size)))

(define (clear-screen!) (fill-rect buffer 0@0 screen-size 0xffffffff))
(define (flip-buffer!) (blit-to-screen buffer 0@0 100 0))

(define board (make-array (* board-size board-size)))
(define moves (make-array (* board-size board-size)))

(define (in-bounds? p)
  (let ((x (point-x p))
        (y (point-y p)))
    (not (or (< x 0) (< y 0) (>= x board-size) (>= y board-size)))))

(define (board-at b p)
  (let ((x (point-x p))
        (y (point-y p)))
    (aget b (+ x (* y board-size)))))

(define (board-at-put b p v)
  (let ((x (point-x p))
        (y (point-y p)))
    (aset b (+ x (* y board-size)) v)))

(define (place-mines board n)
  (dotimes (_ n)
    (let ((x (random board-size)) (y (random board-size)))
      (board-at-put board (make-point x y) -1)
      (dolist (dx '(-1 0 1))
        (dolist (dy '(-1 0 1))
          (let* ((p (make-point (+ x dx) (+ y dy)))
                 (exist (if (in-bounds? p) (board-at board p) -1)))
            (unless (eq exist -1)
              (board-at-put board p (+ 1 exist)))))))))

(place-mines board 15)

(define (rect x y w h color)
  (let ((a (make-point x y))
        (b (make-point w h)))
    (fill-rect buffer a (point+ a b) color)))

(define (make-color r g b a)
  (bit-or (ash a 24)
          (bit-or (ash r 16)
                  (bit-or (ash g 8) b))))

(define (draw-board board)
  (dotimes (y board-size)
    (dotimes (x board-size)
      (rect (+ 1 (* x tile-size))
            (+ 1 (* y tile-size))
            (- tile-size 2)
            (- tile-size 2)
            (let ((it (board-at board (make-point x y))))
              (if (eq it -1)
                  (make-color 255 0 0 255)
                  (make-color (+ 64 (* it (/ 192 10))) 64 64 255)))))))

(define (draw-moves moves)
  (dotimes (y board-size)
    (dotimes (x board-size)
      (when (eq 0 (board-at moves (make-point x y)))
        (rect (+ 1 (* x tile-size))
              (+ 1 (* y tile-size))
              (- tile-size 2)
              (- tile-size 2)
              (make-color 128 128 128 255))))))

(define (draw!)
  (clear-screen!)
  (draw-board board)
  (draw-moves moves)
  (flip-buffer!))

(define (flood-fill x y)
  (let ((p (make-point x y)))
    (when (in-bounds? p)
      (let ((move (board-at moves p))
            (val  (board-at board p)))
        (unless (or (eq move 1) (eq val -1))
          (board-at-put moves p 1)
          (when (eq val 0)
            (flood-fill (+ x  1) (+ y  0))
            (flood-fill (+ x -1) (+ y  0))
            (flood-fill (+ x  0) (+ y  1))
            (flood-fill (+ x  0) (+ y -1))))))))

(define (won?)
  (let ((won #t))
    (dotimes (i (* board-size board-size))
      (let ((move (aget moves i))
            (val  (aget board i)))
        (unless (eq val -1)
          (set! won (and won (eq move 1))))))
    won))

(define (play-move x y)
  (let* ((here (make-point x y))
         (val  (board-at board here)))
    (cond
      ((eq val -1) (print "YOU LOSE"))
      (#t (flood-fill x y))))
  (when (won?) (print "YOU WIN"))
  (draw!))

(define (onmousedown p)
  (let ((x (point-x p))
        (y (point-y p)))
    (play-move (/ x tile-size) (/ y tile-size))))

(request-display (* board-size tile-size) (* board-size tile-size))

(define (onshow size)
  (draw!))
